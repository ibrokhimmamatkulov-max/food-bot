require('dotenv').config();
const { Telegraf, Markup, session } = require('telegraf');
const express = require('express');
const fs = require('fs');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ–Ω—é
const menu = JSON.parse(fs.readFileSync('./menu.json', 'utf8'));

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN);

// –°–µ—Å—Å–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
bot.use(session());

// –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
bot.start((ctx) => {
  ctx.reply(
    '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ú–µ–Ω—é", —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ –±–ª—é–¥.',
    Markup.keyboard([['üìã –ú–µ–Ω—é', 'üõí –ö–æ—Ä–∑–∏–Ω–∞']]).resize()
  );
});

// –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é
bot.hears('üìã –ú–µ–Ω—é', (ctx) => {
  const buttons = menu.map((item) => [Markup.button.callback(item.title, `add_${item.id}`)]);
  ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ:', Markup.inlineKeyboard(buttons));
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
menu.forEach((item) => {
  bot.action(`add_${item.id}`, (ctx) => {
    if (!ctx.session.cart) ctx.session.cart = [];
    const existing = ctx.session.cart.find((i) => i.id === item.id);
    if (existing) {
      existing.quantity += 1;
    } else {
      ctx.session.cart.push({ ...item, quantity: 1 });
    }
    ctx.answerCbQuery(`${item.title} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É`);
  });
});

// –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ä–∑–∏–Ω—ã
bot.hears('üõí –ö–æ—Ä–∑–∏–Ω–∞', (ctx) => {
  const cart = ctx.session.cart || [];
  if (cart.length === 0) {
    return ctx.reply('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');
  }
  let text = 'üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n';
  cart.forEach((item, i) => {
    text += ${i + 1}. ${item.title} √ó ${item.quantity}\n;
  });
  ctx.reply(text, Markup.inlineKeyboard([[Markup.button.callback('‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', 'checkout')]]));
});

// –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
bot.action('checkout', (ctx) => {
  ctx.session.state = 'ask_pavilion';
  ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞–≤–∏–ª—å–æ–Ω–∞:');
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –ø–∞–≤–∏–ª—å–æ–Ω–∞
bot.on('text', (ctx, next) => {
  if (ctx.session.state === 'ask_pavilion') {
    ctx.session.pavilion = ctx.message.text;
    ctx.session.state = 'ask_phone';
    return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:');
  }
  if (ctx.session.state === 'ask_phone') {
    ctx.session.phone = ctx.message.text;
    ctx.session.state = null;

    const cart = ctx.session.cart || [];
    if (cart.length === 0) return ctx.reply('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–∫–∞–∑
    let orderText = "üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n";
    cart.forEach((item, i) => {
      orderText += ${i + 1}. ${item.title} √ó ${item.quantity}\n;
    });
    orderText += \nüè™ –ü–∞–≤–∏–ª—å–æ–Ω: ${ctx.session.pavilion}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${ctx.session.phone};

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
    bot.telegram.sendMessage(process.env.ADMIN_ID, orderText);

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    ctx.session.cart = [];
    return ctx.reply('‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞.');
  }
  return next();
});

// –ó–∞–ø—É—Å–∫ Express —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –≤–µ–±—Ö—É–∫–∞
const app = express();
app.use(express.json());

app.post(`/bot${process.env.BOT_TOKEN}`, (req, res) => {
  bot.handleUpdate(req.body);
  res.sendStatus(200);
});

app.get('/', (req, res) => {
  res.send('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!');
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, async () => {
  console.log(`üåê Server running on port ${PORT}`);

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
  await bot.telegram.setWebhook(`${process.env.RENDER_EXTERNAL_URL}/bot${process.env.BOT_TOKEN}`);
});